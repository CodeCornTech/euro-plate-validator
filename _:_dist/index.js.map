{
  "version": 3,
  "sources": ["../src/countries.ts", "../src/index.ts"],
  "sourcesContent": ["// src/countries.ts\n\n// prettier-ignore\n/** Tutti i country code supportati (Russia esclusa) */\nexport type CountryKey = \"IT\" | \"UK\" | \"DE\" | \"FR\" | \"ES\" | \"PT\" | \"NL\" | \"BE\" | \"CH\" | \"AT\" | \"IE\" | \"LU\" | \"DK\" | \"SE\" | \"NO\" | \"FI\" | \"PL\" | \"CZ\" | \"SK\" | \"HU\" | \"RO\" | \"BG\" | \"SI\" | \"HR\" | \"GR\" | \"LT\" | \"LV\" | \"EE\" | \"UA\";\n\n/** Tipo veicolo */\nexport type VehicleType = \"car\" | \"motorcycle\" | \"any\";\n\n// prettier-ignore\n/** Lista di paesi supportati (const + tipizzato) */\nexport const supportedCountries = [\n  \"IT\", \"UK\", \"DE\", \"FR\", \"ES\", \"PT\", \"NL\", \"BE\", \"CH\", \"AT\", \"IE\", \"LU\", \"DK\", \"SE\", \"NO\", \"FI\", \"PL\", \"CZ\", \"SK\", \"HU\", \"RO\", \"BG\", \"SI\", \"HR\", \"GR\", \"LT\", \"LV\", \"EE\", \"UA\",\n] as const satisfies ReadonlyArray<CountryKey>;\n\n// prettier-ignore\nexport const FLAG_MAP = {\n  IT:\"it\", UK:\"gb\", DE:\"de\", FR:\"fr\", ES:\"es\", PT:\"pt\", NL:\"nl\", BE:\"be\", CH:\"ch\", AT:\"at\", IE:\"ie\", LU:\"lu\",\n  DK:\"dk\", SE:\"se\", NO:\"no\", FI:\"fi\", PL:\"pl\", CZ:\"cz\", SK:\"sk\", HU:\"hu\", RO:\"ro\", BG:\"bg\", SI:\"si\", HR:\"hr\",\n  GR:\"gr\", LT:\"lt\", LV:\"lv\", EE:\"ee\", UA:\"ua\"\n} as const;\n\n// prettier-ignore\nexport const COUNTRY_NAMES = {\n  IT:\"Italy\", UK:\"United Kingdom\", DE:\"Germany\", FR:\"France\", ES:\"Spain\", PT:\"Portugal\", NL:\"Netherlands\",\n  BE:\"Belgium\", CH:\"Switzerland\", AT:\"Austria\", IE:\"Ireland\", LU:\"Luxembourg\", DK:\"Denmark\", SE:\"Sweden\",\n  NO:\"Norway\", FI:\"Finland\", PL:\"Poland\", CZ:\"Czechia\", SK:\"Slovakia\", HU:\"Hungary\", RO:\"Romania\", BG:\"Bulgaria\",\n  SI:\"Slovenia\", HR:\"Croatia\", GR:\"Greece\", LT:\"Lithuania\", LV:\"Latvia\", EE:\"Estonia\", UA:\"Ukraine\"\n} as const;\n\nexport type CountryCode = keyof typeof FLAG_MAP;\n\n/**\n * Normalizes some real-world quirks:\n * - GB \u21E2 UK (ISO alpha-2 is GB; plates often use UK). Your map uses \"UK\", so we normalize to that.\n */\nexport function normalizeCode(code: string): CountryCode | undefined {\n  const up = code.trim().toUpperCase();\n  const alias = up === \"GB\" ? \"UK\" : up;\n  return alias in FLAG_MAP ? (alias as CountryCode) : undefined;\n}\n\nexport function getFlagSlug(code: string): string | undefined {\n  const cc = normalizeCode(code);\n  return cc ? FLAG_MAP[cc] : undefined;\n}\n\nexport function getCountryName(code: string): string | undefined {\n  const cc = normalizeCode(code);\n  return cc ? COUNTRY_NAMES[cc] : undefined;\n}\n\nexport const COUNTRY_CODES = Object.keys(FLAG_MAP) as CountryCode[];\n\nexport type CountryInfo = {\n  code: CountryCode;\n  flag: (typeof FLAG_MAP)[CountryCode];\n  name: (typeof COUNTRY_NAMES)[CountryCode];\n};\n\nexport const COUNTRIES: CountryInfo[] = COUNTRY_CODES.map((c) => ({\n  code: c as CountryCode,\n  flag: FLAG_MAP[c as CountryCode],\n  name: COUNTRY_NAMES[c as CountryCode],\n}));\n\n// Reverse lookups (by flag slug or name)\nexport const FLAG_TO_CODE = Object.fromEntries(\n  COUNTRY_CODES.map((c) => [FLAG_MAP[c], c])\n) as Record<(typeof FLAG_MAP)[CountryCode], CountryCode>;\n\nexport const NAME_TO_CODE = Object.fromEntries(\n  COUNTRY_CODES.map((c) => [COUNTRY_NAMES[c], c])\n) as Record<(typeof COUNTRY_NAMES)[CountryCode], CountryCode>;\n\n/** Entry di pattern per tipo veicolo */\nexport interface PatternSet {\n  car?: ReadonlyArray<{ rx: RegExp }>;\n  motorcycle?: ReadonlyArray<{ rx: RegExp }>;\n}\n\n/** Definizione Paese */\nexport interface CountryDef {\n  name: string;\n  patterns: PatternSet;\n}\n\n// Tipi: solo type, nessuna dipendenza runtime\ntype IMOpts = Inputmask.Options;\n\nexport interface InputMaskLayout {\n  mask: string | string[];\n  definitions?: IMOpts[\"definitions\"];\n  greedy?: IMOpts[\"greedy\"];\n  keepStatic?: IMOpts[\"keepStatic\"];\n  showMaskOnHover?: IMOpts[\"showMaskOnHover\"];\n  showMaskOnFocus?: IMOpts[\"showMaskOnFocus\"];\n  placeholder?: string;\n}\n\n/** Mappe leggibili per UI/placeholder/doc */\nexport const DISPLAY_FORMATS: Partial<Record<CountryKey, string>> = {\n  IT: \"AA 999 AA\", // (senza I O Q U)\n  FR: \"AA-999-AA\",\n  ES: \"9999 AAA\",\n  NL: \"AA-999-AA | 99-AAA-9 | A-999-AA | AA-999-A | 9-AA-999\",\n\n  // DE variabile \u2192 niente formato singolo\n};\n\n/** Layout Inputmask per digitazione assistita (coerenti con le regex) */\nexport const INPUTMASK_LAYOUTS: Partial<Record<CountryKey, InputMaskLayout>> = {\n  IT: {\n    mask: \"AA 999 AA\",\n    // H = [A-HJ-NP-RTV-Z] (niente I, O, Q, U)\n    definitions: { H: { validator: \"[A-HJ-NP-RTV-Z]\", casing: \"upper\" } },\n    placeholder: \"__ ___ __\",\n    keepStatic: true,\n    showMaskOnHover: false,\n    showMaskOnFocus: true,\n  },\n  FR: {\n    mask: \"AA-999-AA\",\n    definitions: { A: { validator: \"[A-Z]\", casing: \"upper\" } },\n    placeholder: \"__-___-__\",\n    keepStatic: true,\n    showMaskOnHover: false,\n    showMaskOnFocus: true,\n  },\n  ES: {\n    mask: \"9999 AAA\",\n    definitions: { A: { validator: \"[A-Z]\", casing: \"upper\" } },\n    placeholder: \"____ ___\",\n    keepStatic: true,\n    showMaskOnHover: false,\n    showMaskOnFocus: true,\n  },\n  // DE: volutamente senza mask (prefissi variabili: \"B A 1\", \"M AA 1234\", ecc.)\n  NL: {\n    mask: [\n      \"LL-999-LL\",\n      \"99-LLL-9\",\n      \"L-999-LL\",\n      \"LL-999-L\",\n      \"9-LL-999\",\n      \"LL-LL-99\",\n      \"99-LL-LL\",\n      \"LLL-99-L\",\n    ],\n    definitions: {\n      L: { validator: \"[BDFGHJKLNPRSTVXYZ]\", casing: \"upper\" },\n    },\n    placeholder: \"\", // no underscore\n    keepStatic: true,\n    showMaskOnHover: false,\n    showMaskOnFocus: false,\n  },\n};\n\n/** Helper ergonomici */\nexport function getInputMask(country: CountryKey): InputMaskLayout | null {\n  return (INPUTMASK_LAYOUTS as Record<CountryKey, InputMaskLayout | undefined>)[country] ?? null;\n}\nexport function getDisplayFormat(country: CountryKey): string | null {\n  return (DISPLAY_FORMATS as Record<CountryKey, string | undefined>)[country] ?? null;\n}\n\n/**\n * Mappa paesi \u2192 definizioni con regex.\n * Usa `satisfies` per garantire che ogni chiave rispetti CountryDef.\n */\nexport const RX: Record<CountryKey, CountryDef> = {\n  IT: {\n    name: \"Italy\",\n    patterns: {\n      // Car 1994\u2013today: AA 999 AA (no I O Q U), skip \"EE\" series\n      car: [{ rx: /^(?!EE)[A-HJ-NPR-TV-Z]{2}\\s?\\d{3}\\s?[A-HJ-NPR-TV-Z]{2}$/ }],\n      //BK 05-10 car: [{ rx: /^(?!EE)[A-HJ-NP-RTZ]{2}\\s?\\d{3}\\s?[A-HJ-NP-RTZ]{2}$/ }],\n      // Motorcycle 1999\u2013oggi: AA 00000 (no I O Q U)\n      motorcycle: [{ rx: /^[A-HJ-NPR-TV-Z]{2}\\s?\\d{5}$/ }],\n      //motorcycle: [{ rx: /^[A-HJ-NP-RTZ]{2}\\s?\\d{5}$/ }],\n      // BK 05-10 motorcycle: [{ rx: /^[A-HJ-NP-RTZ]{2}\\s?\\d{5}$/ }],\n    },\n  },\n\n  UK: {\n    name: \"United Kingdom\",\n    patterns: {\n      car: [\n        // Current (2001\u2013today): AB12 CDE\n        { rx: /^[A-Z]{2}\\d{2}\\s?[A-Z]{3}$/ },\n        // Broad legacy: A1, AB1, ABC1234, etc.\n        { rx: /^[A-Z]{1,3}\\s?\\d{1,4}\\s?[A-Z]{0,3}$/ },\n      ],\n      // (moto non dettagliata qui; si pu\u00F2 aggiungere in futuro)\n    },\n  },\n\n  DE: {\n    name: \"Germany\",\n    patterns: {\n      car: [\n        // Standard: prefisso regionale 1\u20133 lettere + '-' + 1\u20132 lettere + 1\u20134 cifre\n        // Nota: sui prefissi compaiono anche umlaut (\u00C4\u00D6\u00DC); li ammettiamo.\n        { rx: /^[A-Z\u00C4\u00D6\u00DC]{1,3}-[A-Z]{1,2}\\s?\\d{1,4}$/ },\n\n        // Ente pubblico / senza serie lettere a destra delle targhette:\n        // prefisso 1\u20133 lettere + '-' + 1\u20134 cifre\n        { rx: /^[A-Z\u00C4\u00D6\u00DC]{1,3}-\\d{1,4}$/ },\n\n        // Targhe \u201Cspeciali\u201D pratiche e frequenti:\n        // 06 = targhe prova/officina; 07 = storiche (H\u00E4ndler/Oldtimer)\n        { rx: /^[A-Z\u00C4\u00D6\u00DC]{1,3}-06\\s?\\d{1,4}$/ },\n        { rx: /^[A-Z\u00C4\u00D6\u00DC]{1,3}-07\\s?\\d{1,4}$/ },\n\n        // Bundeswehr (militari): \"Y-123 456\" (spazio opzionale). Cifre in 2 blocchi (1\u20133 + 1\u20133).\n        { rx: /^Y-\\d{1,3}\\s?\\d{1,3}$/ },\n      ],\n    },\n  },\n\n  // FR: SOLO trattini, niente spazi\n  FR: {\n    name: \"France\",\n    patterns: {\n      // AA-000-AA (nessuno spazio)\n      car: [{ rx: /^[A-Z]{2}-\\d{3}-[A-Z]{2}$/ }],\n      //    car: [{ rx: /^[A-Z]{2}[-]\\d{3}[-][A-Z]{2}$/ }],\n      //car: [{ rx: /^[A-Z]{2}\\-\\d{3}\\-[A-Z]{2}$/ }],\n    },\n  },\n\n  // ES: lascia cos\u00EC (gi\u00E0 corretta)\n  ES: {\n    name: \"Spain\",\n    patterns: {\n      // 0000 BBB, lettere da consonanti senza A,E,I,\u00D1,O,Q,U\n      car: [{ rx: /^\\d{4}\\s?[BCDFGHJKLMNPRSTVWXYZ]{3}$/ }],\n    },\n  },\n  PT: {\n    name: \"Portugal\",\n    patterns: {\n      car: [\n        { rx: /^\\d{2}-[A-Z]{2}-\\d{2}$/ },\n        { rx: /^[A-Z]{2}-\\d{2}-\\d{2}$/ },\n        { rx: /^\\d{2}-\\d{2}-[A-Z]{2}$/ },\n      ],\n    },\n  },\n\n  // NL: { 05-10-2025\n  //   name: \"Netherlands\",\n  //   patterns: {\n  //     car: [\n  //       { rx: /^[A-Z]{2}-\\d{3}-[A-Z]{2}$/ },\n  //       { rx: /^\\d{2}-[A-Z]{3}-\\d$/ },\n  //       { rx: /^\\d-[A-Z]{3}-\\d{2}$/ },\n  //       { rx: /^[A-Z]{2}-[A-Z]{2}-\\d{2}$/ },\n  //       { rx: /^\\d{2}-[A-Z]{2}-[A-Z]{2}$/ },\n  //       { rx: /^[A-Z]{3}-\\d{2}-[A-Z]$/ },\n  //     ],\n  //   },\n  // },\n  NL: {\n    name: \"Netherlands\",\n    patterns: {\n      car: [\n        // Sidecodes \u201Cstorici/moderni\u201D con trattini\n        // AA-123-AA\n        { rx: /^[BDFGHJKLNPRSTVXYZ]{2}-\\d{3}-[BDFGHJKLNPRSTVXYZ]{2}$/ },\n        // 12-AAA-1\n        { rx: /^\\d{2}-[BDFGHJKLNPRSTVXYZ]{3}-\\d$/ },\n        // 1-AAA-12\n        { rx: /^\\d-[BDFGHJKLNPRSTVXYZ]{3}-\\d{2}$/ },\n        // AA-AA-12\n        { rx: /^[BDFGHJKLNPRSTVXYZ]{2}-[BDFGHJKLNPRSTVXYZ]{2}-\\d{2}$/ },\n        // 12-AA-AA\n        { rx: /^\\d{2}-[BDFGHJKLNPRSTVXYZ]{2}-[BDFGHJKLNPRSTVXYZ]{2}$/ },\n        // AAA-12-A\n        { rx: /^[BDFGHJKLNPRSTVXYZ]{3}-\\d{2}-[BDFGHJKLNPRSTVXYZ]$/ },\n\n        // Nuovi sidecode (dal 2021): A-001-AA, AA-001-A, 0-AA-001\n        { rx: /^[BDFGHJKLNPRSTVXYZ]-\\d{3}-[BDFGHJKLNPRSTVXYZ]{2}$/ }, // A-001-AA\n        { rx: /^[BDFGHJKLNPRSTVXYZ]{2}-\\d{3}-[BDFGHJKLNPRSTVXYZ]$/ }, // AA-001-A\n        { rx: /^\\d-[BDFGHJKLNPRSTVXYZ]{2}-\\d{3}$/ }, // 0-AA-001\n\n        // Tollera eventuali spazi al posto dei trattini (import/export/trascrizioni)\n        { rx: /^[BDFGHJKLNPRSTVXYZ]{2}\\s\\d{3}\\s[BDFGHJKLNPRSTVXYZ]{2}$/ },\n        { rx: /^\\d{2}\\s[BDFGHJKLNPRSTVXYZ]{3}\\s\\d$/ },\n        { rx: /^\\d\\s[BDFGHJKLNPRSTVXYZ]{3}\\s\\d{2}$/ },\n        { rx: /^[BDFGHJKLNPRSTVXYZ]{2}\\s[BDFGHJKLNPRSTVXYZ]{2}\\s\\d{2}$/ },\n        { rx: /^\\d{2}\\s[BDFGHJKLNPRSTVXYZ]{2}\\s[BDFGHJKLNPRSTVXYZ]{2}$/ },\n        { rx: /^[BDFGHJKLNPRSTVXYZ]{3}\\s\\d{2}\\s[BDFGHJKLNPRSTVXYZ]$/ },\n        { rx: /^[BDFGHJKLNPRSTVXYZ]\\s\\d{3}\\s[BDFGHJKLNPRSTVXYZ]{2}$/ },\n        { rx: /^[BDFGHJKLNPRSTVXYZ]{2}\\s\\d{3}\\s[BDFGHJKLNPRSTVXYZ]$/ },\n        { rx: /^\\d\\s[BDFGHJKLNPRSTVXYZ]{2}\\s\\d{3}$/ },\n      ],\n    },\n  },\n\n  BE: {\n    name: \"Belgium\",\n    patterns: { car: [{ rx: /^[1-9]-[A-Z]{3}-\\d{3}$/ }, { rx: /^[A-Z]{3}-\\d{3}$/ }] },\n  },\n  CH: { name: \"Switzerland\", patterns: { car: [{ rx: /^[A-Z]{2}\\s?\\d{1,6}$/ }] } },\n  AT: { name: \"Austria\", patterns: { car: [{ rx: /^[A-Z]{1,3}\\s?\\d{1,4}\\s?[A-Z]{0,2}$/ }] } },\n  IE: { name: \"Ireland\", patterns: { car: [{ rx: /^\\d{2,3}-[A-Z]{1,2}-\\d{1,6}$/ }] } },\n  LU: { name: \"Luxembourg\", patterns: { car: [{ rx: /^\\d{4,6}$/ }, { rx: /^\\d{1,2}-\\d{3,4}$/ }] } },\n  DK: { name: \"Denmark\", patterns: { car: [{ rx: /^[A-Z]{2}\\s?\\d{2}\\s?\\d{3}$/ }] } },\n  SE: { name: \"Sweden\", patterns: { car: [{ rx: /^[A-Z]{3}\\s?\\d{2}[A-Z0-9]$/ }] } },\n  NO: { name: \"Norway\", patterns: { car: [{ rx: /^[A-Z]{2}\\s?\\d{5}$/ }] } },\n  FI: { name: \"Finland\", patterns: { car: [{ rx: /^[A-Z]{3}-\\d{3}$/ }] } },\n  PL: { name: \"Poland\", patterns: { car: [{ rx: /^[A-Z]{1,3}\\s?[A-Z0-9]{4,5}$/ }] } },\n  CZ: { name: \"Czechia\", patterns: { car: [{ rx: /^\\d[A-Z]{2}\\s?\\d{4}$/ }] } },\n  SK: { name: \"Slovakia\", patterns: { car: [{ rx: /^[A-Z]{2}\\s?\\d{3,4}[A-Z]{0,2}$/ }] } },\n  HU: {\n    name: \"Hungary\",\n    patterns: {\n      car: [\n        { rx: /^[A-Z]{3}-\\d{3}$/ }, // storico: ABC-123\n        { rx: /^[A-Z]{4}-\\d{3}$/ }, // nuovo: 2022\u2192, AAAA-123\n        { rx: /^[A-Z]{2}\\d{2}-[A-Z]{2}$/ }, // ampia (legacy/transitorio)\n      ],\n    },\n  },\n  RO: { name: \"Romania\", patterns: { car: [{ rx: /^[A-Z]{1,2}\\s?\\d{2,3}\\s?[A-Z]{3}$/ }] } },\n  BG: { name: \"Bulgaria\", patterns: { car: [{ rx: /^[A-Z]{1,2}\\s?\\d{4}\\s?[A-Z]{1,2}$/ }] } },\n  SI: { name: \"Slovenia\", patterns: { car: [{ rx: /^[A-Z]{2}-\\d{3,4}-[A-Z]{1,2}$/ }] } },\n  HR: { name: \"Croatia\", patterns: { car: [{ rx: /^[A-Z]{2}\\s?\\d{3,4}-[A-Z]{2}$/ }] } },\n  GR: { name: \"Greece\", patterns: { car: [{ rx: /^[A-Z]{3}-\\d{4}$/ }] } },\n  LT: { name: \"Lithuania\", patterns: { car: [{ rx: /^[A-Z]{3}\\s?\\d{3}$/ }] } },\n  LV: { name: \"Latvia\", patterns: { car: [{ rx: /^[A-Z]{2}-\\d{4}$/ }] } },\n  EE: { name: \"Estonia\", patterns: { car: [{ rx: /^\\d{3}\\s?[A-Z]{3}$/ }] } },\n  UA: { name: \"Ukraine\", patterns: { car: [{ rx: /^[A-Z]{2}\\s?\\d{4}\\s?[A-Z]{2}$/ }] } },\n} satisfies Record<CountryKey, CountryDef>;\n", "// src/index.ts\n// @ts-check  // (se vuoi anche nei sorgenti)\n\n/** @typedef {import(\"./countries.js\").CountryKey} CountryKey */\n/** @typedef {import(\"./countries.js\").CountryDef} CountryDef */\n/** @typedef {\"car\"|\"motorcycle\"|\"any\"} VehicleType */\n/** @typedef {{ country: CountryKey; name: string }} ValidateMatch */\n/** @typedef {{ vehicleType?: VehicleType }} ValidateOptions */\n/** @typedef {{ isValid: boolean; matches: ValidateMatch[]; checked: CountryKey[]; errors?: string[] }} ValidateResult */\n\nimport { RX, supportedCountries } from \"./countries.js\";\nimport type { CountryKey, VehicleType, CountryDef } from \"./countries.js\";\nexport type { CountryKey, VehicleType, CountryDef } from \"./countries.js\";\nexport * from \"./countries.js\";\n\n/** Risultato di un match paese/targa */\nexport interface Match {\n  country: CountryKey;\n  name: string;\n}\n\nexport interface ValidateOptions {\n  vehicleType?: VehicleType;\n}\n\nexport interface ValidateMatch {\n  country: CountryKey;\n  name: string;\n}\n\nexport interface ValidateResult {\n  isValid: boolean;\n  matches: ValidateMatch[];\n  checked: CountryKey[];\n  errors?: string[];\n}\n\n/** Normalizza l'input targa: maiuscolo, spazi consolidati, trim.\n *  @param {string} input\n *  @returns {string}\n */\nexport function normalize(input: string): string {\n  return String(input ?? \"\")\n    .toUpperCase()\n    .replace(/\\s+/g, \" \")\n    .trim();\n}\n\n/** Genera i pattern (RegExp) per un dato paese e tipo veicolo.\n *  @param {CountryKey} country\n *  @param {VehicleType} vehicleType\n *  @returns {Generator<RegExp>}\n */\nfunction* pickPatternsFor(country: CountryKey, vehicleType: VehicleType): Generator<RegExp> {\n  const set: CountryDef[\"patterns\"] = RX[country].patterns;\n  if (vehicleType === \"car\" || vehicleType === \"any\") {\n    for (const p of set.car ?? []) yield p.rx;\n  }\n  if (vehicleType === \"motorcycle\" || vehicleType === \"any\") {\n    for (const p of set.motorcycle ?? []) yield p.rx;\n  }\n}\n\n/** Valida una targa contro uno o pi\u00F9 paesi.\n *  @param {string} plate\n *  @param {readonly CountryKey[]=} countries  Elenco di paesi da controllare (default: tutti)\n *  @param {ValidateOptions=} options          { vehicleType?: \"car\"|\"motorcycle\"|\"any\" } (default \"any\")\n *  @returns {ValidateResult}\n */\nexport function validatePlate(\n  plate: string,\n  countries?: readonly CountryKey[],\n  options: ValidateOptions = {}\n): ValidateResult {\n  const vehicleType: VehicleType = options.vehicleType ?? \"any\";\n  const norm = normalize(plate);\n\n  // Normalizza l\u2019elenco dei paesi in un array mutabile locale, tipizzato\n  const picks: CountryKey[] =\n    countries && countries.length\n      ? (countries.filter((c): c is CountryKey => c in RX) as CountryKey[])\n      : [...supportedCountries];\n\n  if (!norm) {\n    return { isValid: false, matches: [], checked: picks, errors: [\"empty\"] };\n  }\n  if (!picks.length) {\n    return { isValid: false, matches: [], checked: [], errors: [\"no_countries_selected\"] };\n  }\n\n  const matches: ValidateMatch[] = [];\n  for (const c of picks) {\n    for (const rx of pickPatternsFor(c, vehicleType)) {\n      if (rx.test(norm)) {\n        matches.push({ country: c, name: RX[c].name });\n        break;\n      }\n    }\n  }\n\n  return {\n    isValid: matches.length > 0,\n    matches,\n    checked: picks,\n    errors: matches.length ? undefined : [\"no_match\"],\n  };\n}\n"],
  "mappings": "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",
  "names": []
}
